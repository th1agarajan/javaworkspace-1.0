<h2>How to dubug a web project which is imported from the version
	control (CVS/SVN) as a java project in Eclipse</h2>
<p>Most of the real time projects will not follow the directory
	structure of Eclipse and will have either Ant build.xml file or Maven
	pom.xml file to build the project. When you check out the project from
	CVS/SVN, the project will be checked out as java project. It is not
	necessary to have a web project to debug in Eclipse. It is advisable to
	convert a java project to web project if the folder structure matches
	the Eclipse standards. If the imported project's folder structure is
	different, then it is better to debug the java project directly.</p>

<p>Let's get started</p>
<p>Initial setup</p>

<p>
<ol>
	<li>I just created a sample java project PaginationInServlets (can
		be downloaded from
		http://www.javaworkspace.com/paginationInServlets.do)</li>
	<li>Deleted the default folder src (default folder for source
		files) and created a folder with the name myOwnSrcFolder and copied
		all the .java files.</li>
	<li>Created a folder MyOwnFolder and copied all the contents of
		WebContent(Default Eclipse folder to store Web information files).</li>
	<li>Created a folder with the name dist(distribution) to have the
		final .war generated by one of the target in build.xml file.</li>
	<li>Copied the build.xml file in the base folder
		PaginationInServlets.</li>
</ol>

<p>I have created an environment which is similar to the one which
	you checked-out from SVN or CVS.</p>
<p>
	The project can be downloaded from <a
		href="eclipseTutorials/downloads/PaginationInServlets.zip">download</a>
	Find below the directory structure after the creating the project. It
	doesn't adhere to Eclipse standards.
</p>

<div class="tutorialContentFullWidth">
	<img width="935" src="eclipseTutorials/images/debug/0debug.png"
		alt="Debug Web - Java project using eclipse - www.javaworkspace.com" />
</div>


<p>
	<strong>Steps to debug the web project which is checked-out as
		java project</strong>
</p>

<p>1. First step is to make our user defined source folder
	(myOwnSrcFolder) in way that eclipse understands. Just right click the
	myOwnSrcFolder -&gt; Build Path -&gt; Use as Source Folder</p>
<div class="tutorialContentFullWidth">
	<img width="935" src="eclipseTutorials/images/debug/1debug.png"
		alt="Debug Web - Java project using eclipse - www.javaworkspace.com" />
</div>

<p>2. Now add all the necessary .jar files in build path. Right
	click the project -> Build Path -> Configure Build Path... -> In
	Libraries tab click Add JARs... Choose the corresponding project and
	navigate to the folder (normally it should be with the name lib inside
	WEB-INF folder) where all the .jar files are placed and select all the
	.jar files and click ok.</p>
<p>Then navigate to Source tab in the same popup window. You should
	able to see myOwnSrcFolder in Source folders on build path: box.</p>
<p>In the same window in the bottom you will find Default output
	folder: as PaginationInServlets /bin. This is nothing but the folder
	where the .java files are compiled and .class files are copied. But in
	build.xml we have mentioned the .class folder as
	MyOwnFolder/WEB-INF/classes. If you really want to save both the
	generated .class files (one generated by eclipse and one generated by
	ant build) in the same folder then you can update the location to
	PaginationInServlets/MyOwnFolder/WEB-INF/classes by clicking the Browse
	button.
<div class="tutorialContentFullWidth">
	<img src="eclipseTutorials/images/debug/2debug.png"
		alt="Debug Web - Java project using eclipse - www.javaworkspace.com" />
</div>

<p>By default output folder is not visible in Package Explorer
	window. But it is visible in Navigator view.</p>
<div class="tutorialContentFullWidth">
	<img width="935" src="eclipseTutorials/images/debug/3debug.png"
		alt="Debug Web - Java project using eclipse - www.javaworkspace.com" />
</div>
<p>Make sure that you have added the new Tomcat server in server tab
	(Refer server tab in above picture).</p>
<p>Now click the project main folder PaginationInServlets then click
	the small drop down arrow next to debug icon (Green bug - Refer picture
	below) -> Debug Configurations...</p>
<div class="tutorialContentFullWidth">
	<img width="935" src="eclipseTutorials/images/debug/4debug.png"
		alt="Debug Web - Java project using eclipse - www.javaworkspace.com" />
</div>
<p>This will pop up a Debug Configuration window. Select Apach
	Tomcat from left menu and right click -> New</p>
<div class="tutorialContentFullWidth">
	<img width="935" src="eclipseTutorials/images/debug/5debug.png"
		alt="Debug Web - Java project using eclipse - www.javaworkspace.com" />
</div>
<p>After clicking New, you will get a new window in the center
	(Refer image below). In the Arguments tab, update Program arguments:
	start VM arguments: -Dcatalina.home="C:\apache-tomcat-7.0.37"
	-Dcatalina.base="C:\apache-tomcat-7.0.37" Don't forget the hyphen.
	C:\apache-tomcat-7.0.37 is the location where your tomcat is installed.
	You can change the default name (New_configuration) to Project name
	(PaginationInServlets) in Name: text box.</p>

<table border="1">
	<tr>
		<td>Pro<span style="text-decoration: underline;">g</span>ram
			arguments:
		</td>
		<td>start</td>
	</tr>
	<tr>
		<td>VM ar<span style="text-decoration: underline;">g</span>uments:
		</td>
		<td>-Dcatalina.home="C:\apache-tomcat-7.0.37"<br>
			-Dcatalina.base="C:\apache-tomcat-7.0.37"
		</td>
	</tr>
</table>

<div class="tutorialContentFullWidth">
	<img src="eclipseTutorials/images/debug/6debug.png"
		alt="Debug Web - Java project using eclipse - www.javaworkspace.com" />
</div>
<p>In Classpath tab click User Entries -> Add External JARs... and
	add the following .jar files C:\apache-tomcat-7.0.37\bin\bootstrap.jar
	C:\apache-tomcat-7.0.37\bin\tomcat-juli.jar D:\Program Files
	(x86)\Java\jdk1.7.0_15\lib\tools.jar The version of apache tomcat and
	Java might vary in your case.</p>
<div class="tutorialContentFullWidth">
	<img src="eclipseTutorials/images/debug/7debug.png"
		alt="Debug Web - Java project using eclipse - www.javaworkspace.com" />
</div>
<p>In Source tab click Add... -> Java Project -> Choose the
	corresponding project (PaginationInServlets) -> OK -> Apply -> Close.</p>
<div class="tutorialContentFullWidth">
	<img width="935" src="eclipseTutorials/images/debug/8debug.png"
		alt="Debug Web - Java project using eclipse - www.javaworkspace.com" />
</div>
<p>Now add break point in the .java files then click debug button ->
	Debug Configurations... -> this will pop up a Debug configuration
	window. Select your project under Apache Tomcat in left menu then click
	Debug.</p>
<div class="tutorialContentFullWidth">
	<img width="935" src="eclipseTutorials/images/debug/9debug.png"
		alt="Debug Web - Java project using eclipse - www.javaworkspace.com" />
</div>
<p>Now hit the URL and the control comes to the place where you kept
	the break point. Start debugging.</p>

<p>
	If you encounter the error Unable to install breakpoint then refer the
	link <a
		href="http://www.javaworkspace.com/unableToInstallBreakPoint.do">http://www.javaworkspace.com/unableToInstallBreakPoint.do</a>.
</p>
<p>
	If you encounter the error Specified VM install not found: type
	Standard VM, name jre7 then refer the link some <a
		href="http://www.javaworkspace.com/VMNotFound.do">http://www.javaworkspace.com/VMNotFound.do</a>.
</p>

<div class="fb-comments"
	data-href="http://www.javaworkspace.com/debugTomcat.do"
	data-width="470" data-num-posts="10"></div>